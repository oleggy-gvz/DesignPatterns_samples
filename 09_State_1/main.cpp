/*
 * ПАТТЕРН "СОСТОЯНИЕ"
 *
 * Необходимо уйдти от проверки цепочки состояний машины в каждом методе. Для этого необходимо реализовать некий "интерфейс" который будет описывать
 * в себе те 4-е действия которые мы хотим получить в нашем автомобиле. Далее необходимо реализовать отдельные классы по каждому состоянию
 * (Бензина нет, Бензин есть, Мотор запущен, Машина едет). Далее в классе Car будем вызывать вместо конкретных методов, по каждому состоянию,
 * метод текущего стостояния, т.к. состояние будет у нас не просто enum а полноценный класс. Т.е. будем делегировать выполнение этого метода самому
 * классу состояния, вместо того что бы выполнять его самостоятельно в классе Car.
 *
 * Пример:
 * -------
 *
 *
 *
 * Проблема проектирования:
 * -----------------------
 *
 *
 *
 */

#include "Car.h"

using namespace std;

int main()
{
    shared_ptr<Car> car(new Car());
    car->FillTank();
    car->TurnKey();
    car->TurnKey();
    car->TurnKey();
    car->Drive();
    car->Stop();

    system("pause");
    return 0;
}
