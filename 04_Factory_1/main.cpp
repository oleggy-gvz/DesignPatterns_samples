/*
 * в этом примере рассматривается: неполноценый ФАБРИЧНЫЙ МЕТОД
 * Для решения такой проблемы необходимо концептуально изменить принцип работы объектов. Создание объекта выделено в отдельный класс (SimpleFactory) в котором есть
 * тольк один метод создание объекта (GetCar). Данный клас и не зависит от других классов. Такой подход называется простая фабрика.
 * Далее определяем класс завод (VolkswagenFacility) в котором создаем поле на объект указатель класса простой фабрики (SimpleFactory).  Где этот указатель передается в данный
 * класс из конструктора. Где с помошью метода GetCar класса SimpleFactory создается объект автомобиля.
 * В главной программе создаем заранее объект фабрики, который потом передаем заводу.
 *
 * Проблема проектирования:
 * -----------------------
 * Т.к. завод Volkswagen существует не в единственном экземпляре, марка распространена по всему миру. Поэтому возникает необходимость проиводить на различных заводах,
 * различных странах частные модификации машин под различные нужды потребителей. Что бы отвечать таким потребностям, можно использовать SimpleFactory и от нее наследовать
 * различные фабрики по созданию различных модификаций автомобилей. А можно другим способом:
 * В том же самом классе где релизован Facility реализовать абстрактный метод.
 *
 * В базовом классе (VolkswagenFacility) нужно отделить инфраструктру создания автомобиля. А во всех классах наследников (....VolkswagenFacility) реализовать только способ
 * инстанциации классов, т.е. получения конкретных типов автомобилей. Т.е. не нужно для каждой отдельной фабрики реализовывать отдельный экземпляр
 * получения типа машины (объект SimpleFactory, метод CreateCar) и процесс создания машины (объект VolkswagenFacility, метод GetCar).
 */

#include <iostream>
#include <string>
#include "Facilities\VolkswagenFacility.hpp"
#include "Factory\SimpleFactory.hpp"

int main()
{
    auto factory = new SimpleFactory(); // процесс получения типа машины
    VolkswagenFacility facility(factory); // процесс создания машины

    facility.GetCar("Golf");
    cout << endl;

    facility.GetCar("Passat");
    cout << endl;

    facility.GetCar("Tiguan");
    cout << endl;

    facility.GetCar("Tuareg");
    cout << endl;

    return 0;
}
